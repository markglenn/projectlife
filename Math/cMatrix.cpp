#include "cMatrix.h"

// Include Paul Nettle's memory manager
#include "../Memory/mmgr.h"

/////////////////////////////////////////////////////////////////////////////////////
cMatrix::cMatrix(void)
/////////////////////////////////////////////////////////////////////////////////////
{
	ZeroMemory (m, sizeof(float) * 16);
}

/////////////////////////////////////////////////////////////////////////////////////
cMatrix::cMatrix(float *values)
/////////////////////////////////////////////////////////////////////////////////////
{
	SetValues(values);
}

/////////////////////////////////////////////////////////////////////////////////////
cMatrix::~cMatrix(void)
/////////////////////////////////////////////////////////////////////////////////////
{
}

/////////////////////////////////////////////////////////////////////////////////////
void cMatrix::MakeIdentity()
/////////////////////////////////////////////////////////////////////////////////////
{
	ZeroMemory (m, sizeof(float) * 16);

	m[0] = m[5] = m[10] = m[15] = 1.0f;
}

/////////////////////////////////////////////////////////////////////////////////////
void cMatrix::SetPosition(cVector position)
/////////////////////////////////////////////////////////////////////////////////////
{
	MakeIdentity();

	m[12] = position.x;
	m[13] = position.y;
	m[14] = position.z;
}

/////////////////////////////////////////////////////////////////////////////////////
cMatrix cMatrix::operator * (cMatrix &mat)
/////////////////////////////////////////////////////////////////////////////////////
{
	cMatrix tmp;
	
	tmp.m[0]  = (m[0] * mat.m[0]) + (m[1] * mat.m[4]) + (m[2] * mat.m[8])  + (m[3] * mat.m[12]);
	tmp.m[1]  = (m[0] * mat.m[1]) + (m[1] * mat.m[5]) + (m[2] * mat.m[9])  + (m[3] * mat.m[13]);
	tmp.m[2]  = (m[0] * mat.m[2]) + (m[1] * mat.m[6]) + (m[2] * mat.m[10]) + (m[3] * mat.m[14]);
	tmp.m[3]  = (m[0] * mat.m[3]) + (m[1] * mat.m[7]) + (m[2] * mat.m[11]) + (m[3] * mat.m[15]);

	tmp.m[4]  = (m[4] * mat.m[0]) + (m[5] * mat.m[4]) + (m[6] * mat.m[8])  + (m[7] * mat.m[12]);
	tmp.m[5]  = (m[4] * mat.m[1]) + (m[5] * mat.m[5]) + (m[6] * mat.m[9])  + (m[7] * mat.m[13]);
	tmp.m[6]  = (m[4] * mat.m[2]) + (m[5] * mat.m[6]) + (m[6] * mat.m[10]) + (m[7] * mat.m[14]);
	tmp.m[7]  = (m[4] * mat.m[3]) + (m[5] * mat.m[7]) + (m[6] * mat.m[11]) + (m[7] * mat.m[15]);

	tmp.m[8]  = (m[8] * mat.m[0]) + (m[9] * mat.m[4]) + (m[10] * mat.m[8])  + (m[11] * mat.m[12]);
	tmp.m[9]  = (m[8] * mat.m[1]) + (m[9] * mat.m[5]) + (m[10] * mat.m[9])  + (m[11] * mat.m[13]);
	tmp.m[10] = (m[8] * mat.m[2]) + (m[9] * mat.m[6]) + (m[10] * mat.m[10]) + (m[11] * mat.m[14]);
	tmp.m[11] = (m[8] * mat.m[3]) + (m[9] * mat.m[7]) + (m[10] * mat.m[11]) + (m[11] * mat.m[15]);

	tmp.m[12] = (m[12] * mat.m[0]) + (m[13] * mat.m[4]) + (m[14] * mat.m[8])  + (m[15] * mat.m[12]);
	tmp.m[13] = (m[12] * mat.m[1]) + (m[13] * mat.m[5]) + (m[14] * mat.m[9])  + (m[15] * mat.m[13]);
	tmp.m[14] = (m[12] * mat.m[2]) + (m[13] * mat.m[6]) + (m[14] * mat.m[10]) + (m[15] * mat.m[14]);
	tmp.m[15] = (m[12] * mat.m[3]) + (m[13] * mat.m[7]) + (m[14] * mat.m[11]) + (m[15] * mat.m[15]);

	return tmp;
}