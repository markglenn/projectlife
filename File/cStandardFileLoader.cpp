#include "cStandardFileLoader.h"

REGISTER_CLASS (cFileLoader, cStandardFileLoader, "")

// Include Paul Nettle's memory manager
#include "../Memory/mmgr.h"
/////////////////////////////////////////////////////////////////////////////////////
cStandardFileLoader::cStandardFileLoader()
/////////////////////////////////////////////////////////////////////////////////////
{
	cFileLoader();
}

/////////////////////////////////////////////////////////////////////////////////////
bool cStandardFileLoader::InitDirectory (std::string directory)
/////////////////////////////////////////////////////////////////////////////////////
{
	m_directory = directory;
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////
cStandardFileLoader::~cStandardFileLoader(void)
/////////////////////////////////////////////////////////////////////////////////////
{
}

/////////////////////////////////////////////////////////////////////////////////////
unsigned char* cStandardFileLoader::ReadFile (std::string filename)
/////////////////////////////////////////////////////////////////////////////////////
{
	FILE *fp;
	unsigned char *data;

	filename = m_directory + filename;
	
	// Open the file
	if ((fp = fopen (filename.c_str(), "rb")) == NULL)
		return NULL;

	// Get the filelength
	fseek (fp, 0, SEEK_END);
	m_filesize = ftell (fp);
	fseek (fp, 0, SEEK_SET);
	
	data = new unsigned char[m_filesize];
	fread (data, 1, m_filesize, fp);

	return data;
}
